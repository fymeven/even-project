<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
    xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://code.alibabatech.com/schema/dubbo
                     http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!--redis 配置-->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory"   ref="connectionFactory" />
    </bean>

    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
     p:hostName="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}"  p:poolConfig-ref="poolConfig"/>
     
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>


    <!--rocketMq配置-->
    <bean id="rocketMqProducer" class="com.even.common.rocketmq.SmsRocketMQProducer" init-method="init" destroy-method="destory">
        <property name="namesrvAddr" value="${rocketmq.namesrvAddr}"></property>
        <property name="producerGroup" value="${rocketmq.producerGroup}"></property>
    </bean>

    <bean id="rocketMqConsumer" class="com.even.common.rocketmq.SmsRocketMQConsumer" init-method="init" destroy-method="destory">
        <property name="namesrvAddr" value="${rocketmq.namesrvAddr}"></property>
        <property name="consumerGroup" value="${rocketmq.consumerGroup}"></property>
    </bean>

    <!--定义了提供方应用信息，用于计算依赖关系；在 dubbo-admin 或 dubbo-monitor 会显示这个名字，方便辨识-->
    <dubbo:application name="demotest-provider" owner="programmer" organization="dubbox"/>
    <!--使用 zookeeper 注册中心暴露服务，注意要先开启 zookeeper-->
    <dubbo:registry address="zookeeper://localhost:2181"/>
    <!-- 用dubbo协议在20880端口暴露服务 -->
    <dubbo:protocol name="dubbo" port="20880" />
    <!--使用 dubbo 协议实现定义好的 api.PermissionService 接口-->
    <dubbo:service interface="com.even.service.dubbo.DemoService" ref="demoService" protocol="dubbo" />
    <!--具体实现该接口的 bean-->
    <bean id="demoService" class="com.even.service.impl.dubbo.DemoServiceImpl"/>
</beans>
